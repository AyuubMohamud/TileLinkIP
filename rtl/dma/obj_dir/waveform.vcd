$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 g dma_a_address [31:0] $end
  $var wire  1 j dma_a_corrupt $end
  $var wire 32 i dma_a_data [31:0] $end
  $var wire  4 h dma_a_mask [3:0] $end
  $var wire  3 d dma_a_opcode [2:0] $end
  $var wire  3 e dma_a_param [2:0] $end
  $var wire  1 l dma_a_ready $end
  $var wire  4 f dma_a_size [3:0] $end
  $var wire  1 k dma_a_valid $end
  $var wire  1 r dma_d_corrupt $end
  $var wire 32 q dma_d_data [31:0] $end
  $var wire  1 p dma_d_denied $end
  $var wire  3 m dma_d_opcode [2:0] $end
  $var wire  2 n dma_d_param [1:0] $end
  $var wire  1 t dma_d_ready $end
  $var wire  4 o dma_d_size [3:0] $end
  $var wire  1 s dma_d_valid $end
  $var wire  1 a dmac_busy_o $end
  $var wire 32 ` dmac_bytes_tx_i [31:0] $end
  $var wire  1 [ dmac_clock_i $end
  $var wire 32 _ dmac_dest_address_i [31:0] $end
  $var wire  1 b dmac_done_o $end
  $var wire  1 c dmac_err_o $end
  $var wire  1 \ dmac_reset_i $end
  $var wire 32 ^ dmac_source_address_i [31:0] $end
  $var wire  1 ] dmac_tx_i $end
  $scope module openPolarisDMACore $end
   $var wire  2 z DMA_AWAIT [1:0] $end
   $var wire  2 y DMA_READ [1:0] $end
   $var wire  2 { DMA_WRITE [1:0] $end
   $var wire  2 x IDLE [1:0] $end
   $var wire 32 w TL_AW [31:0] $end
   $var wire  8 5 byte_count [7:0] $end
   $var wire 32 $ bytesRemaining [31:0] $end
   $var wire 32 , bytes_0 [31:0] $end
   $var wire 32 . bytes_1 [31:0] $end
   $var wire 32 0 bytes_2 [31:0] $end
   $var wire  8 6 count_store [7:0] $end
   $var wire 32 ) current_destination_address [31:0] $end
   $var wire 32 ( current_source_address [31:0] $end
   $var wire 32 g dma_a_address [31:0] $end
   $var wire  1 j dma_a_corrupt $end
   $var wire 32 i dma_a_data [31:0] $end
   $var wire  4 h dma_a_mask [3:0] $end
   $var wire  3 d dma_a_opcode [2:0] $end
   $var wire  3 e dma_a_param [2:0] $end
   $var wire  1 l dma_a_ready $end
   $var wire  4 f dma_a_size [3:0] $end
   $var wire  1 k dma_a_valid $end
   $var wire  1 r dma_d_corrupt $end
   $var wire 32 q dma_d_data [31:0] $end
   $var wire  1 p dma_d_denied $end
   $var wire  3 m dma_d_opcode [2:0] $end
   $var wire  2 n dma_d_param [1:0] $end
   $var wire  1 t dma_d_ready $end
   $var wire  4 o dma_d_size [3:0] $end
   $var wire  1 s dma_d_valid $end
   $var wire  2 * dma_state [1:0] $end
   $var wire  1 a dmac_busy_o $end
   $var wire 32 ` dmac_bytes_tx_i [31:0] $end
   $var wire  1 [ dmac_clock_i $end
   $var wire 32 _ dmac_dest_address_i [31:0] $end
   $var wire  1 b dmac_done_o $end
   $var wire  1 c dmac_err_o $end
   $var wire  1 \ dmac_reset_i $end
   $var wire 32 ^ dmac_source_address_i [31:0] $end
   $var wire  1 ] dmac_tx_i $end
   $var wire  1 ' empty $end
   $var wire  1 % full $end
   $var wire  4 + max_burst_size_from_dest_addr [3:0] $end
   $var wire  4 / max_burst_size_from_remainder [3:0] $end
   $var wire  4 - max_burst_size_from_src_addr [3:0] $end
   $var wire  4 1 min_stage1 [3:0] $end
   $var wire 32 3 min_stage1_bsize [31:0] $end
   $var wire  4 2 minimum [3:0] $end
   $var wire 32 4 minimum_bytes [31:0] $end
   $var wire 32 8 minimum_bytes_r [31:0] $end
   $var wire 32 & read_data [31:0] $end
   $var wire  1 v read_fifo $end
   $var wire  4 7 size_store [3:0] $end
   $var wire  1 u write_fifo $end
   $scope module fifo $end
    $var wire 32 w DW [31:0] $end
    $var wire 32 w FW [31:0] $end
    $var wire 32 9 fifo[0] [31:0] $end
    $var wire 32 C fifo[10] [31:0] $end
    $var wire 32 D fifo[11] [31:0] $end
    $var wire 32 E fifo[12] [31:0] $end
    $var wire 32 F fifo[13] [31:0] $end
    $var wire 32 G fifo[14] [31:0] $end
    $var wire 32 H fifo[15] [31:0] $end
    $var wire 32 I fifo[16] [31:0] $end
    $var wire 32 J fifo[17] [31:0] $end
    $var wire 32 K fifo[18] [31:0] $end
    $var wire 32 L fifo[19] [31:0] $end
    $var wire 32 : fifo[1] [31:0] $end
    $var wire 32 M fifo[20] [31:0] $end
    $var wire 32 N fifo[21] [31:0] $end
    $var wire 32 O fifo[22] [31:0] $end
    $var wire 32 P fifo[23] [31:0] $end
    $var wire 32 Q fifo[24] [31:0] $end
    $var wire 32 R fifo[25] [31:0] $end
    $var wire 32 S fifo[26] [31:0] $end
    $var wire 32 T fifo[27] [31:0] $end
    $var wire 32 U fifo[28] [31:0] $end
    $var wire 32 V fifo[29] [31:0] $end
    $var wire 32 ; fifo[2] [31:0] $end
    $var wire 32 W fifo[30] [31:0] $end
    $var wire 32 X fifo[31] [31:0] $end
    $var wire 32 < fifo[3] [31:0] $end
    $var wire 32 = fifo[4] [31:0] $end
    $var wire 32 > fifo[5] [31:0] $end
    $var wire 32 ? fifo[6] [31:0] $end
    $var wire 32 @ fifo[7] [31:0] $end
    $var wire 32 A fifo[8] [31:0] $end
    $var wire 32 B fifo[9] [31:0] $end
    $var wire  1 [ i_clk $end
    $var wire  1 v i_rd $end
    $var wire  1 \ i_reset $end
    $var wire 32 q i_wr_data [31:0] $end
    $var wire  1 u i_wr_en $end
    $var wire  1 ' o_empty $end
    $var wire  1 % o_full $end
    $var wire 32 & o_rd_data [31:0] $end
    $var wire  6 Y read_ptr [5:0] $end
    $var wire  6 Z write_ptr [5:0] $end
    $scope module unnamedblk1 $end
     $var wire 32 # i [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000100000 #
b00000000000000000000000000100000 $
0%
b00000000000000000000000000000000 &
1'
b00000000000000000000000000000100 (
b00000000000000000000000110010000 )
b01 *
b0111 +
b00000000000000000000000010000000 ,
b0111 -
b00000000000000000000000010000000 .
b0101 /
b00000000000000000000000000100000 0
b0111 1
b0101 2
b00000000000000000000000010000000 3
b00000000000000000000000000100000 4
b00000000 5
b00000000 6
b0000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b000000 Y
b000000 Z
1[
0\
1]
b00000000000000000000000000000100 ^
b00000000000000000000000110010000 _
b00000000000000000000000000100000 `
1a
0b
0c
b000 d
b000 e
b0000 f
b00000000000000000000000000000000 g
b0000 h
b00000000000000000000000000000000 i
0j
0k
1l
b000 m
b00 n
b0000 o
0p
b00000000000000000000000000000000 q
0r
1s
1t
0u
0v
b00000000000000000000000000100000 w
b00 x
b01 y
b10 z
b11 {
#1
0[
#2
b00000000000000000000000000100100 (
b10 *
b00100000 6
b0101 7
b00000000000000000000000000100000 8
1[
0]
b100 d
b0101 f
b00000000000000000000000000000100 g
1k
1v
#3
0[
#4
b00000100 5
1[
0k
#5
0[
#6
b00001000 5
1[
#7
0[
#8
b00001100 5
1[
#9
0[
#10
b00010000 5
1[
#11
0[
#12
b00010100 5
1[
#13
0[
#14
b00011000 5
1[
#15
0[
#16
b00011100 5
1[
#17
0[
#18
b00100000 5
1[
0v
#19
0[
#20
b11 *
b00000000 5
1[
1v
#21
0[
#22
b00000100 5
1[
b000 d
b00000000000000000000000110010000 g
b1111 h
1k
#23
0[
#24
b00001000 5
1[
#25
0[
#26
b00001100 5
1[
#27
0[
#28
b00010000 5
1[
#29
0[
#30
b00010100 5
1[
#31
0[
#32
b00011000 5
1[
#33
0[
#34
b00011100 5
1[
#35
0[
#36
b00100000 5
1[
0v
#37
0[
#38
b00000000000000000000000000000000 $
b00000000000000000000000110110000 )
b01 *
b0111 /
b00000000000000000000000010000000 0
b0111 2
b00000000000000000000000010000000 4
1[
0k
#39
0[
#40
b00 *
1[
0a
1b
#41
0[
#42
1[
#43
0[
#44
1[
#45
0[
#46
1[
#47
0[
#48
1[
#49
0[
#50
1[
#51
0[
#52
1[
#53
0[
#54
1[
#55
0[
#56
1[
#57
0[
#58
1[
#59
0[
#60
1[
#61
0[
#62
1[
#63
0[
#64
1[
#65
0[
#66
1[
#67
0[
#68
1[
#69
0[
#70
1[
#71
0[
#72
1[
#73
0[
#74
1[
#75
0[
#76
1[
#77
0[
#78
1[
#79
0[
#80
1[
#81
0[
#82
1[
#83
0[
#84
1[
#85
0[
#86
1[
#87
0[
#88
1[
#89
0[
#90
1[
#91
0[
#92
1[
#93
0[
#94
1[
#95
0[
#96
1[
#97
0[
#98
1[
#99
0[
#100
1[
#101
0[
#102
1[
#103
0[
#104
1[
#105
0[
#106
1[
#107
0[
#108
1[
#109
0[
#110
1[
#111
0[
#112
1[
#113
0[
#114
1[
#115
0[
#116
1[
#117
0[
#118
1[
#119
0[
#120
1[
#121
0[
#122
1[
#123
0[
#124
1[
#125
0[
#126
1[
#127
0[
#128
1[
#129
0[
#130
1[
#131
0[
#132
1[
#133
0[
#134
1[
#135
0[
#136
1[
#137
0[
#138
1[
#139
0[
#140
1[
#141
0[
#142
1[
#143
0[
#144
1[
#145
0[
#146
1[
#147
0[
#148
1[
#149
0[
#150
1[
#151
0[
#152
1[
#153
0[
#154
1[
#155
0[
#156
1[
#157
0[
#158
1[
#159
0[
#160
1[
#161
0[
#162
1[
#163
0[
#164
1[
#165
0[
#166
1[
#167
0[
#168
1[
#169
0[
#170
1[
#171
0[
#172
1[
#173
0[
#174
1[
#175
0[
#176
1[
#177
0[
#178
1[
#179
0[
#180
1[
#181
0[
#182
1[
#183
0[
#184
1[
#185
0[
#186
1[
#187
0[
#188
1[
#189
0[
#190
1[
#191
0[
#192
1[
#193
0[
#194
1[
#195
0[
#196
1[
#197
0[
#198
1[
#199
0[
#200
1[
#201
0[
#202
1[
#203
0[
#204
1[
#205
0[
#206
1[
#207
0[
#208
1[
#209
0[
#210
1[
#211
0[
#212
1[
#213
0[
#214
1[
#215
0[
#216
1[
#217
0[
#218
1[
#219
0[
#220
1[
#221
0[
#222
1[
#223
0[
#224
1[
#225
0[
#226
1[
#227
0[
#228
1[
#229
0[
#230
1[
#231
0[
#232
1[
#233
0[
#234
1[
#235
0[
#236
1[
#237
0[
#238
1[
#239
0[
#240
1[
#241
0[
#242
1[
#243
0[
#244
1[
#245
0[
#246
1[
#247
0[
#248
1[
#249
0[
#250
1[
#251
0[
#252
1[
#253
0[
#254
1[
#255
0[
#256
1[
#257
0[
#258
1[
#259
0[
#260
1[
#261
0[
#262
1[
#263
0[
#264
1[
#265
0[
#266
1[
#267
0[
#268
1[
#269
0[
#270
1[
#271
0[
#272
1[
#273
0[
#274
1[
#275
0[
#276
1[
#277
0[
#278
1[
#279
0[
#280
1[
#281
0[
#282
1[
#283
0[
#284
1[
#285
0[
#286
1[
#287
0[
#288
1[
#289
0[
#290
1[
#291
0[
#292
1[
#293
0[
#294
1[
#295
0[
#296
1[
#297
0[
#298
1[
#299
0[
