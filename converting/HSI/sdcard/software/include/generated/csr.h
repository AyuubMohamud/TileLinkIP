//--------------------------------------------------------------------------------
// Auto-generated by LiteX (9854c9f3) on 2023-08-31 18:15:44
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

#ifndef CSR_BASE
#define CSR_BASE 0x23000000L
#endif

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
static inline uint32_t ctrl_reset_soc_rst_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ctrl_reset_soc_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_soc_rst_extract(word);
}
static inline uint32_t ctrl_reset_soc_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ctrl_reset_soc_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_soc_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1
static inline uint32_t ctrl_reset_cpu_rst_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ctrl_reset_cpu_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_cpu_rst_extract(word);
}
static inline uint32_t ctrl_reset_cpu_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ctrl_reset_cpu_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_cpu_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x4L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x8L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}

/* sdcard_block2mem */
#define CSR_SDCARD_BLOCK2MEM_BASE (CSR_BASE + 0x800L)
#define CSR_SDCARD_BLOCK2MEM_DMA_BASE_ADDR (CSR_BASE + 0x800L)
#define CSR_SDCARD_BLOCK2MEM_DMA_BASE_SIZE 2
static inline uint64_t sdcard_block2mem_dma_base_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x800L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x804L));
	return r;
}
static inline void sdcard_block2mem_dma_base_write(uint64_t v) {
	csr_write_simple(v >> 32, (CSR_BASE + 0x800L));
	csr_write_simple(v, (CSR_BASE + 0x804L));
}
#define CSR_SDCARD_BLOCK2MEM_DMA_LENGTH_ADDR (CSR_BASE + 0x808L)
#define CSR_SDCARD_BLOCK2MEM_DMA_LENGTH_SIZE 1
static inline uint32_t sdcard_block2mem_dma_length_read(void) {
	return csr_read_simple((CSR_BASE + 0x808L));
}
static inline void sdcard_block2mem_dma_length_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x808L));
}
#define CSR_SDCARD_BLOCK2MEM_DMA_ENABLE_ADDR (CSR_BASE + 0x80cL)
#define CSR_SDCARD_BLOCK2MEM_DMA_ENABLE_SIZE 1
static inline uint32_t sdcard_block2mem_dma_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x80cL));
}
static inline void sdcard_block2mem_dma_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x80cL));
}
#define CSR_SDCARD_BLOCK2MEM_DMA_DONE_ADDR (CSR_BASE + 0x810L)
#define CSR_SDCARD_BLOCK2MEM_DMA_DONE_SIZE 1
static inline uint32_t sdcard_block2mem_dma_done_read(void) {
	return csr_read_simple((CSR_BASE + 0x810L));
}
#define CSR_SDCARD_BLOCK2MEM_DMA_LOOP_ADDR (CSR_BASE + 0x814L)
#define CSR_SDCARD_BLOCK2MEM_DMA_LOOP_SIZE 1
static inline uint32_t sdcard_block2mem_dma_loop_read(void) {
	return csr_read_simple((CSR_BASE + 0x814L));
}
static inline void sdcard_block2mem_dma_loop_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x814L));
}
#define CSR_SDCARD_BLOCK2MEM_DMA_OFFSET_ADDR (CSR_BASE + 0x818L)
#define CSR_SDCARD_BLOCK2MEM_DMA_OFFSET_SIZE 1
static inline uint32_t sdcard_block2mem_dma_offset_read(void) {
	return csr_read_simple((CSR_BASE + 0x818L));
}

/* sdcard_core */
#define CSR_SDCARD_CORE_BASE (CSR_BASE + 0x1000L)
#define CSR_SDCARD_CORE_CMD_ARGUMENT_ADDR (CSR_BASE + 0x1000L)
#define CSR_SDCARD_CORE_CMD_ARGUMENT_SIZE 1
static inline uint32_t sdcard_core_cmd_argument_read(void) {
	return csr_read_simple((CSR_BASE + 0x1000L));
}
static inline void sdcard_core_cmd_argument_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1000L));
}
#define CSR_SDCARD_CORE_CMD_COMMAND_ADDR (CSR_BASE + 0x1004L)
#define CSR_SDCARD_CORE_CMD_COMMAND_SIZE 1
static inline uint32_t sdcard_core_cmd_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x1004L));
}
static inline void sdcard_core_cmd_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1004L));
}
#define CSR_SDCARD_CORE_CMD_COMMAND_CMD_TYPE_OFFSET 0
#define CSR_SDCARD_CORE_CMD_COMMAND_CMD_TYPE_SIZE 2
static inline uint32_t sdcard_core_cmd_command_cmd_type_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdcard_core_cmd_command_cmd_type_read(void) {
	uint32_t word = sdcard_core_cmd_command_read();
	return sdcard_core_cmd_command_cmd_type_extract(word);
}
static inline uint32_t sdcard_core_cmd_command_cmd_type_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdcard_core_cmd_command_cmd_type_write(uint32_t plain_value) {
	uint32_t oldword = sdcard_core_cmd_command_read();
	uint32_t newword = sdcard_core_cmd_command_cmd_type_replace(oldword, plain_value);
	sdcard_core_cmd_command_write(newword);
}
#define CSR_SDCARD_CORE_CMD_COMMAND_DATA_TYPE_OFFSET 5
#define CSR_SDCARD_CORE_CMD_COMMAND_DATA_TYPE_SIZE 2
static inline uint32_t sdcard_core_cmd_command_data_type_extract(uint32_t oldword) {
	uint32_t mask = 0x3;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdcard_core_cmd_command_data_type_read(void) {
	uint32_t word = sdcard_core_cmd_command_read();
	return sdcard_core_cmd_command_data_type_extract(word);
}
static inline uint32_t sdcard_core_cmd_command_data_type_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdcard_core_cmd_command_data_type_write(uint32_t plain_value) {
	uint32_t oldword = sdcard_core_cmd_command_read();
	uint32_t newword = sdcard_core_cmd_command_data_type_replace(oldword, plain_value);
	sdcard_core_cmd_command_write(newword);
}
#define CSR_SDCARD_CORE_CMD_COMMAND_CMD_OFFSET 8
#define CSR_SDCARD_CORE_CMD_COMMAND_CMD_SIZE 6
static inline uint32_t sdcard_core_cmd_command_cmd_extract(uint32_t oldword) {
	uint32_t mask = 0x3f;
	return ( (oldword >> 8) & mask );
}
static inline uint32_t sdcard_core_cmd_command_cmd_read(void) {
	uint32_t word = sdcard_core_cmd_command_read();
	return sdcard_core_cmd_command_cmd_extract(word);
}
static inline uint32_t sdcard_core_cmd_command_cmd_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x3f;
	return (oldword & (~(mask << 8))) | (mask & plain_value)<< 8 ;
}
static inline void sdcard_core_cmd_command_cmd_write(uint32_t plain_value) {
	uint32_t oldword = sdcard_core_cmd_command_read();
	uint32_t newword = sdcard_core_cmd_command_cmd_replace(oldword, plain_value);
	sdcard_core_cmd_command_write(newword);
}
#define CSR_SDCARD_CORE_CMD_SEND_ADDR (CSR_BASE + 0x1008L)
#define CSR_SDCARD_CORE_CMD_SEND_SIZE 1
static inline uint32_t sdcard_core_cmd_send_read(void) {
	return csr_read_simple((CSR_BASE + 0x1008L));
}
static inline void sdcard_core_cmd_send_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1008L));
}
#define CSR_SDCARD_CORE_CMD_RESPONSE_ADDR (CSR_BASE + 0x100cL)
#define CSR_SDCARD_CORE_CMD_RESPONSE_SIZE 4
#define CSR_SDCARD_CORE_CMD_EVENT_ADDR (CSR_BASE + 0x101cL)
#define CSR_SDCARD_CORE_CMD_EVENT_SIZE 1
static inline uint32_t sdcard_core_cmd_event_read(void) {
	return csr_read_simple((CSR_BASE + 0x101cL));
}
#define CSR_SDCARD_CORE_CMD_EVENT_DONE_OFFSET 0
#define CSR_SDCARD_CORE_CMD_EVENT_DONE_SIZE 1
static inline uint32_t sdcard_core_cmd_event_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdcard_core_cmd_event_done_read(void) {
	uint32_t word = sdcard_core_cmd_event_read();
	return sdcard_core_cmd_event_done_extract(word);
}
#define CSR_SDCARD_CORE_CMD_EVENT_ERROR_OFFSET 1
#define CSR_SDCARD_CORE_CMD_EVENT_ERROR_SIZE 1
static inline uint32_t sdcard_core_cmd_event_error_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdcard_core_cmd_event_error_read(void) {
	uint32_t word = sdcard_core_cmd_event_read();
	return sdcard_core_cmd_event_error_extract(word);
}
#define CSR_SDCARD_CORE_CMD_EVENT_TIMEOUT_OFFSET 2
#define CSR_SDCARD_CORE_CMD_EVENT_TIMEOUT_SIZE 1
static inline uint32_t sdcard_core_cmd_event_timeout_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdcard_core_cmd_event_timeout_read(void) {
	uint32_t word = sdcard_core_cmd_event_read();
	return sdcard_core_cmd_event_timeout_extract(word);
}
#define CSR_SDCARD_CORE_CMD_EVENT_CRC_OFFSET 3
#define CSR_SDCARD_CORE_CMD_EVENT_CRC_SIZE 1
static inline uint32_t sdcard_core_cmd_event_crc_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdcard_core_cmd_event_crc_read(void) {
	uint32_t word = sdcard_core_cmd_event_read();
	return sdcard_core_cmd_event_crc_extract(word);
}
#define CSR_SDCARD_CORE_DATA_EVENT_ADDR (CSR_BASE + 0x1020L)
#define CSR_SDCARD_CORE_DATA_EVENT_SIZE 1
static inline uint32_t sdcard_core_data_event_read(void) {
	return csr_read_simple((CSR_BASE + 0x1020L));
}
#define CSR_SDCARD_CORE_DATA_EVENT_DONE_OFFSET 0
#define CSR_SDCARD_CORE_DATA_EVENT_DONE_SIZE 1
static inline uint32_t sdcard_core_data_event_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdcard_core_data_event_done_read(void) {
	uint32_t word = sdcard_core_data_event_read();
	return sdcard_core_data_event_done_extract(word);
}
#define CSR_SDCARD_CORE_DATA_EVENT_ERROR_OFFSET 1
#define CSR_SDCARD_CORE_DATA_EVENT_ERROR_SIZE 1
static inline uint32_t sdcard_core_data_event_error_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdcard_core_data_event_error_read(void) {
	uint32_t word = sdcard_core_data_event_read();
	return sdcard_core_data_event_error_extract(word);
}
#define CSR_SDCARD_CORE_DATA_EVENT_TIMEOUT_OFFSET 2
#define CSR_SDCARD_CORE_DATA_EVENT_TIMEOUT_SIZE 1
static inline uint32_t sdcard_core_data_event_timeout_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdcard_core_data_event_timeout_read(void) {
	uint32_t word = sdcard_core_data_event_read();
	return sdcard_core_data_event_timeout_extract(word);
}
#define CSR_SDCARD_CORE_DATA_EVENT_CRC_OFFSET 3
#define CSR_SDCARD_CORE_DATA_EVENT_CRC_SIZE 1
static inline uint32_t sdcard_core_data_event_crc_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdcard_core_data_event_crc_read(void) {
	uint32_t word = sdcard_core_data_event_read();
	return sdcard_core_data_event_crc_extract(word);
}
#define CSR_SDCARD_CORE_BLOCK_LENGTH_ADDR (CSR_BASE + 0x1024L)
#define CSR_SDCARD_CORE_BLOCK_LENGTH_SIZE 1
static inline uint32_t sdcard_core_block_length_read(void) {
	return csr_read_simple((CSR_BASE + 0x1024L));
}
static inline void sdcard_core_block_length_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1024L));
}
#define CSR_SDCARD_CORE_BLOCK_COUNT_ADDR (CSR_BASE + 0x1028L)
#define CSR_SDCARD_CORE_BLOCK_COUNT_SIZE 1
static inline uint32_t sdcard_core_block_count_read(void) {
	return csr_read_simple((CSR_BASE + 0x1028L));
}
static inline void sdcard_core_block_count_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1028L));
}

/* sdcard_irq */
#define CSR_SDCARD_IRQ_BASE (CSR_BASE + 0x1800L)
#define CSR_SDCARD_IRQ_STATUS_ADDR (CSR_BASE + 0x1800L)
#define CSR_SDCARD_IRQ_STATUS_SIZE 1
static inline uint32_t sdcard_irq_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x1800L));
}
#define CSR_SDCARD_IRQ_STATUS_CARD_DETECT_OFFSET 0
#define CSR_SDCARD_IRQ_STATUS_CARD_DETECT_SIZE 1
static inline uint32_t sdcard_irq_status_card_detect_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdcard_irq_status_card_detect_read(void) {
	uint32_t word = sdcard_irq_status_read();
	return sdcard_irq_status_card_detect_extract(word);
}
#define CSR_SDCARD_IRQ_STATUS_BLOCK2MEM_DMA_OFFSET 1
#define CSR_SDCARD_IRQ_STATUS_BLOCK2MEM_DMA_SIZE 1
static inline uint32_t sdcard_irq_status_block2mem_dma_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdcard_irq_status_block2mem_dma_read(void) {
	uint32_t word = sdcard_irq_status_read();
	return sdcard_irq_status_block2mem_dma_extract(word);
}
#define CSR_SDCARD_IRQ_STATUS_MEM2BLOCK_DMA_OFFSET 2
#define CSR_SDCARD_IRQ_STATUS_MEM2BLOCK_DMA_SIZE 1
static inline uint32_t sdcard_irq_status_mem2block_dma_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdcard_irq_status_mem2block_dma_read(void) {
	uint32_t word = sdcard_irq_status_read();
	return sdcard_irq_status_mem2block_dma_extract(word);
}
#define CSR_SDCARD_IRQ_STATUS_CMD_DONE_OFFSET 3
#define CSR_SDCARD_IRQ_STATUS_CMD_DONE_SIZE 1
static inline uint32_t sdcard_irq_status_cmd_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdcard_irq_status_cmd_done_read(void) {
	uint32_t word = sdcard_irq_status_read();
	return sdcard_irq_status_cmd_done_extract(word);
}
#define CSR_SDCARD_IRQ_PENDING_ADDR (CSR_BASE + 0x1804L)
#define CSR_SDCARD_IRQ_PENDING_SIZE 1
static inline uint32_t sdcard_irq_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x1804L));
}
static inline void sdcard_irq_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1804L));
}
#define CSR_SDCARD_IRQ_PENDING_CARD_DETECT_OFFSET 0
#define CSR_SDCARD_IRQ_PENDING_CARD_DETECT_SIZE 1
static inline uint32_t sdcard_irq_pending_card_detect_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdcard_irq_pending_card_detect_read(void) {
	uint32_t word = sdcard_irq_pending_read();
	return sdcard_irq_pending_card_detect_extract(word);
}
static inline uint32_t sdcard_irq_pending_card_detect_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdcard_irq_pending_card_detect_write(uint32_t plain_value) {
	uint32_t oldword = sdcard_irq_pending_read();
	uint32_t newword = sdcard_irq_pending_card_detect_replace(oldword, plain_value);
	sdcard_irq_pending_write(newword);
}
#define CSR_SDCARD_IRQ_PENDING_BLOCK2MEM_DMA_OFFSET 1
#define CSR_SDCARD_IRQ_PENDING_BLOCK2MEM_DMA_SIZE 1
static inline uint32_t sdcard_irq_pending_block2mem_dma_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdcard_irq_pending_block2mem_dma_read(void) {
	uint32_t word = sdcard_irq_pending_read();
	return sdcard_irq_pending_block2mem_dma_extract(word);
}
static inline uint32_t sdcard_irq_pending_block2mem_dma_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdcard_irq_pending_block2mem_dma_write(uint32_t plain_value) {
	uint32_t oldword = sdcard_irq_pending_read();
	uint32_t newword = sdcard_irq_pending_block2mem_dma_replace(oldword, plain_value);
	sdcard_irq_pending_write(newword);
}
#define CSR_SDCARD_IRQ_PENDING_MEM2BLOCK_DMA_OFFSET 2
#define CSR_SDCARD_IRQ_PENDING_MEM2BLOCK_DMA_SIZE 1
static inline uint32_t sdcard_irq_pending_mem2block_dma_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdcard_irq_pending_mem2block_dma_read(void) {
	uint32_t word = sdcard_irq_pending_read();
	return sdcard_irq_pending_mem2block_dma_extract(word);
}
static inline uint32_t sdcard_irq_pending_mem2block_dma_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdcard_irq_pending_mem2block_dma_write(uint32_t plain_value) {
	uint32_t oldword = sdcard_irq_pending_read();
	uint32_t newword = sdcard_irq_pending_mem2block_dma_replace(oldword, plain_value);
	sdcard_irq_pending_write(newword);
}
#define CSR_SDCARD_IRQ_PENDING_CMD_DONE_OFFSET 3
#define CSR_SDCARD_IRQ_PENDING_CMD_DONE_SIZE 1
static inline uint32_t sdcard_irq_pending_cmd_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdcard_irq_pending_cmd_done_read(void) {
	uint32_t word = sdcard_irq_pending_read();
	return sdcard_irq_pending_cmd_done_extract(word);
}
static inline uint32_t sdcard_irq_pending_cmd_done_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdcard_irq_pending_cmd_done_write(uint32_t plain_value) {
	uint32_t oldword = sdcard_irq_pending_read();
	uint32_t newword = sdcard_irq_pending_cmd_done_replace(oldword, plain_value);
	sdcard_irq_pending_write(newword);
}
#define CSR_SDCARD_IRQ_ENABLE_ADDR (CSR_BASE + 0x1808L)
#define CSR_SDCARD_IRQ_ENABLE_SIZE 1
static inline uint32_t sdcard_irq_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x1808L));
}
static inline void sdcard_irq_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1808L));
}
#define CSR_SDCARD_IRQ_ENABLE_CARD_DETECT_OFFSET 0
#define CSR_SDCARD_IRQ_ENABLE_CARD_DETECT_SIZE 1
static inline uint32_t sdcard_irq_enable_card_detect_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdcard_irq_enable_card_detect_read(void) {
	uint32_t word = sdcard_irq_enable_read();
	return sdcard_irq_enable_card_detect_extract(word);
}
static inline uint32_t sdcard_irq_enable_card_detect_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdcard_irq_enable_card_detect_write(uint32_t plain_value) {
	uint32_t oldword = sdcard_irq_enable_read();
	uint32_t newword = sdcard_irq_enable_card_detect_replace(oldword, plain_value);
	sdcard_irq_enable_write(newword);
}
#define CSR_SDCARD_IRQ_ENABLE_BLOCK2MEM_DMA_OFFSET 1
#define CSR_SDCARD_IRQ_ENABLE_BLOCK2MEM_DMA_SIZE 1
static inline uint32_t sdcard_irq_enable_block2mem_dma_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdcard_irq_enable_block2mem_dma_read(void) {
	uint32_t word = sdcard_irq_enable_read();
	return sdcard_irq_enable_block2mem_dma_extract(word);
}
static inline uint32_t sdcard_irq_enable_block2mem_dma_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdcard_irq_enable_block2mem_dma_write(uint32_t plain_value) {
	uint32_t oldword = sdcard_irq_enable_read();
	uint32_t newword = sdcard_irq_enable_block2mem_dma_replace(oldword, plain_value);
	sdcard_irq_enable_write(newword);
}
#define CSR_SDCARD_IRQ_ENABLE_MEM2BLOCK_DMA_OFFSET 2
#define CSR_SDCARD_IRQ_ENABLE_MEM2BLOCK_DMA_SIZE 1
static inline uint32_t sdcard_irq_enable_mem2block_dma_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdcard_irq_enable_mem2block_dma_read(void) {
	uint32_t word = sdcard_irq_enable_read();
	return sdcard_irq_enable_mem2block_dma_extract(word);
}
static inline uint32_t sdcard_irq_enable_mem2block_dma_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdcard_irq_enable_mem2block_dma_write(uint32_t plain_value) {
	uint32_t oldword = sdcard_irq_enable_read();
	uint32_t newword = sdcard_irq_enable_mem2block_dma_replace(oldword, plain_value);
	sdcard_irq_enable_write(newword);
}
#define CSR_SDCARD_IRQ_ENABLE_CMD_DONE_OFFSET 3
#define CSR_SDCARD_IRQ_ENABLE_CMD_DONE_SIZE 1
static inline uint32_t sdcard_irq_enable_cmd_done_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdcard_irq_enable_cmd_done_read(void) {
	uint32_t word = sdcard_irq_enable_read();
	return sdcard_irq_enable_cmd_done_extract(word);
}
static inline uint32_t sdcard_irq_enable_cmd_done_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdcard_irq_enable_cmd_done_write(uint32_t plain_value) {
	uint32_t oldword = sdcard_irq_enable_read();
	uint32_t newword = sdcard_irq_enable_cmd_done_replace(oldword, plain_value);
	sdcard_irq_enable_write(newword);
}

/* sdcard_mem2block */
#define CSR_SDCARD_MEM2BLOCK_BASE (CSR_BASE + 0x2000L)
#define CSR_SDCARD_MEM2BLOCK_DMA_BASE_ADDR (CSR_BASE + 0x2000L)
#define CSR_SDCARD_MEM2BLOCK_DMA_BASE_SIZE 2
static inline uint64_t sdcard_mem2block_dma_base_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x2000L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x2004L));
	return r;
}
static inline void sdcard_mem2block_dma_base_write(uint64_t v) {
	csr_write_simple(v >> 32, (CSR_BASE + 0x2000L));
	csr_write_simple(v, (CSR_BASE + 0x2004L));
}
#define CSR_SDCARD_MEM2BLOCK_DMA_LENGTH_ADDR (CSR_BASE + 0x2008L)
#define CSR_SDCARD_MEM2BLOCK_DMA_LENGTH_SIZE 1
static inline uint32_t sdcard_mem2block_dma_length_read(void) {
	return csr_read_simple((CSR_BASE + 0x2008L));
}
static inline void sdcard_mem2block_dma_length_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2008L));
}
#define CSR_SDCARD_MEM2BLOCK_DMA_ENABLE_ADDR (CSR_BASE + 0x200cL)
#define CSR_SDCARD_MEM2BLOCK_DMA_ENABLE_SIZE 1
static inline uint32_t sdcard_mem2block_dma_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x200cL));
}
static inline void sdcard_mem2block_dma_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x200cL));
}
#define CSR_SDCARD_MEM2BLOCK_DMA_DONE_ADDR (CSR_BASE + 0x2010L)
#define CSR_SDCARD_MEM2BLOCK_DMA_DONE_SIZE 1
static inline uint32_t sdcard_mem2block_dma_done_read(void) {
	return csr_read_simple((CSR_BASE + 0x2010L));
}
#define CSR_SDCARD_MEM2BLOCK_DMA_LOOP_ADDR (CSR_BASE + 0x2014L)
#define CSR_SDCARD_MEM2BLOCK_DMA_LOOP_SIZE 1
static inline uint32_t sdcard_mem2block_dma_loop_read(void) {
	return csr_read_simple((CSR_BASE + 0x2014L));
}
static inline void sdcard_mem2block_dma_loop_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2014L));
}
#define CSR_SDCARD_MEM2BLOCK_DMA_OFFSET_ADDR (CSR_BASE + 0x2018L)
#define CSR_SDCARD_MEM2BLOCK_DMA_OFFSET_SIZE 1
static inline uint32_t sdcard_mem2block_dma_offset_read(void) {
	return csr_read_simple((CSR_BASE + 0x2018L));
}

/* sdcard_phy */
#define CSR_SDCARD_PHY_BASE (CSR_BASE + 0x2800L)
#define CSR_SDCARD_PHY_CARD_DETECT_ADDR (CSR_BASE + 0x2800L)
#define CSR_SDCARD_PHY_CARD_DETECT_SIZE 1
static inline uint32_t sdcard_phy_card_detect_read(void) {
	return csr_read_simple((CSR_BASE + 0x2800L));
}
#define CSR_SDCARD_PHY_CLOCKER_DIVIDER_ADDR (CSR_BASE + 0x2804L)
#define CSR_SDCARD_PHY_CLOCKER_DIVIDER_SIZE 1
static inline uint32_t sdcard_phy_clocker_divider_read(void) {
	return csr_read_simple((CSR_BASE + 0x2804L));
}
static inline void sdcard_phy_clocker_divider_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2804L));
}
#define CSR_SDCARD_PHY_INIT_INITIALIZE_ADDR (CSR_BASE + 0x2808L)
#define CSR_SDCARD_PHY_INIT_INITIALIZE_SIZE 1
static inline uint32_t sdcard_phy_init_initialize_read(void) {
	return csr_read_simple((CSR_BASE + 0x2808L));
}
static inline void sdcard_phy_init_initialize_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2808L));
}
#define CSR_SDCARD_PHY_DATAW_STATUS_ADDR (CSR_BASE + 0x280cL)
#define CSR_SDCARD_PHY_DATAW_STATUS_SIZE 1
static inline uint32_t sdcard_phy_dataw_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x280cL));
}
#define CSR_SDCARD_PHY_DATAW_STATUS_ACCEPTED_OFFSET 0
#define CSR_SDCARD_PHY_DATAW_STATUS_ACCEPTED_SIZE 1
static inline uint32_t sdcard_phy_dataw_status_accepted_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdcard_phy_dataw_status_accepted_read(void) {
	uint32_t word = sdcard_phy_dataw_status_read();
	return sdcard_phy_dataw_status_accepted_extract(word);
}
#define CSR_SDCARD_PHY_DATAW_STATUS_CRC_ERROR_OFFSET 1
#define CSR_SDCARD_PHY_DATAW_STATUS_CRC_ERROR_SIZE 1
static inline uint32_t sdcard_phy_dataw_status_crc_error_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdcard_phy_dataw_status_crc_error_read(void) {
	uint32_t word = sdcard_phy_dataw_status_read();
	return sdcard_phy_dataw_status_crc_error_extract(word);
}
#define CSR_SDCARD_PHY_DATAW_STATUS_WRITE_ERROR_OFFSET 2
#define CSR_SDCARD_PHY_DATAW_STATUS_WRITE_ERROR_SIZE 1
static inline uint32_t sdcard_phy_dataw_status_write_error_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdcard_phy_dataw_status_write_error_read(void) {
	uint32_t word = sdcard_phy_dataw_status_read();
	return sdcard_phy_dataw_status_write_error_extract(word);
}

#endif
